// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.StrongholdDemo;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon subsystem1RightSlave;
    public static CANTalon subsystem1LeftSlave;
    public static CANTalon subsystem1LeftMaster;
    public static CANTalon subsystem1RightMaster;
    public static CANTalon shooterBallCollect;
    public static CANTalon shooterRearShoot;
    public static DoubleSolenoid shooterTrigger;
    public static DoubleSolenoid shooterArm;
    public static CANTalon hornsCANTalon1;
    public static Compressor compressorSystemCompressor1;
    public static RobotDrive chassis;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
//        subsystem1RightSlave = new CANTalon(4);
//        subsystem1RightSlave.setControlMode(CANTalon.TalonControlMode.Follower.getValue());
//        subsystem1RightSlave.set(3);
//        LiveWindow.addActuator("Subsystem 1", "RightSlave", subsystem1RightSlave);
//        
//        subsystem1LeftSlave = new CANTalon(1);
////      	subsystem1LeftSlave.reverseOutput(true);
//
//        subsystem1LeftSlave.setControlMode(CANTalon.TalonControlMode.Follower.getValue());
//        subsystem1LeftSlave.set(2);
//        LiveWindow.addActuator("Subsystem 1", "LeftSlave", subsystem1LeftSlave);
        
        subsystem1LeftMaster = new CANTalon(2);
//      subsystem1LeftMaster = new CANTalon(1);
        subsystem1LeftMaster.setInverted(true);
        subsystem1LeftMaster.setControlMode(CANTalon.TalonControlMode.PercentVbus.getValue());
        LiveWindow.addActuator("Subsystem 1", "LeftMaster", subsystem1LeftMaster);
        
        subsystem1RightMaster = new CANTalon(3);
//        subsystem1RightMaster = new CANTalon(4);
        subsystem1RightMaster.setControlMode(CANTalon.TalonControlMode.PercentVbus.getValue());
        LiveWindow.addActuator("Subsystem 1", "RightMaster", subsystem1RightMaster);
        
        shooterBallCollect = new CANTalon(5);
        shooterBallCollect.setControlMode(CANTalon.TalonControlMode.PercentVbus.getValue());
        LiveWindow.addActuator("Shooter", "BallCollect", shooterBallCollect);
        
        shooterRearShoot = new CANTalon(6);
        shooterRearShoot.setControlMode(CANTalon.TalonControlMode.PercentVbus.getValue());
        LiveWindow.addActuator("Shooter", "RearShoot", shooterRearShoot);
        
        shooterTrigger = new DoubleSolenoid(0, 3, 2);
        LiveWindow.addActuator("Shooter", "Trigger", shooterTrigger);
        
        shooterArm = new DoubleSolenoid(0, 1, 0);
        LiveWindow.addActuator("Shooter", "Arm", shooterArm);
        
        hornsCANTalon1 = new CANTalon(7);
        hornsCANTalon1.setControlMode(CANTalon.TalonControlMode.PercentVbus.getValue());
        LiveWindow.addActuator("Horns", "CAN Talon 1", hornsCANTalon1);
        
        compressorSystemCompressor1 = new Compressor(0);

//        chassis = new RobotDrive(subsystem1LeftMaster, subsystem1LeftSlave, subsystem1RightMaster, subsystem1RightSlave);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
